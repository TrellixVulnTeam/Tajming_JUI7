import {
  require_prop_types
} from "./chunk-Z63GXI7W.js";
import {
  Col_default
} from "./chunk-EDGJ5HE6.js";
import {
  createWithBsPrefix
} from "./chunk-5EA65GFZ.js";
import {
  require_classnames,
  useBootstrapPrefix
} from "./chunk-NKREUT7D.js";
import {
  require_jsx_runtime
} from "./chunk-POO4APME.js";
import {
  __commonJS,
  __objRest,
  __spreadProps,
  __spreadValues,
  __toModule,
  require_react
} from "./chunk-NQQWALO5.js";

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning3 = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning3 = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning3;
  }
});

// node_modules/react-bootstrap/esm/FormCheck.js
var import_classnames4 = __toModule(require_classnames());
var React6 = __toModule(require_react());
var import_react3 = __toModule(require_react());

// node_modules/react-bootstrap/esm/Feedback.js
var import_classnames = __toModule(require_classnames());
var React = __toModule(require_react());
var import_prop_types = __toModule(require_prop_types());
var import_jsx_runtime = __toModule(require_jsx_runtime());
var propTypes = {
  type: import_prop_types.default.string,
  tooltip: import_prop_types.default.bool,
  as: import_prop_types.default.elementType
};
var Feedback = React.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "div",
    className,
    type = "valid",
    tooltip = false
  } = _b, props = __objRest(_b, [
    "as",
    "className",
    "type",
    "tooltip"
  ]);
  return (0, import_jsx_runtime.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames.default)(className, `${type}-${tooltip ? "tooltip" : "feedback"}`)
  }));
});
Feedback.displayName = "Feedback";
Feedback.propTypes = propTypes;
var Feedback_default = Feedback;

// node_modules/react-bootstrap/esm/FormCheckInput.js
var import_classnames2 = __toModule(require_classnames());
var React3 = __toModule(require_react());
var import_react = __toModule(require_react());

// node_modules/react-bootstrap/esm/FormContext.js
var React2 = __toModule(require_react());
var FormContext = React2.createContext({});
var FormContext_default = FormContext;

// node_modules/react-bootstrap/esm/FormCheckInput.js
var import_jsx_runtime2 = __toModule(require_jsx_runtime());
var FormCheckInput = React3.forwardRef((_a, ref) => {
  var _b = _a, {
    id,
    bsPrefix,
    className,
    type = "checkbox",
    isValid = false,
    isInvalid = false,
    as: Component = "input"
  } = _b, props = __objRest(_b, [
    "id",
    "bsPrefix",
    "className",
    "type",
    "isValid",
    "isInvalid",
    "as"
  ]);
  const {
    controlId
  } = (0, import_react.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-check-input");
  return (0, import_jsx_runtime2.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    type,
    id: id || controlId,
    className: (0, import_classnames2.default)(className, bsPrefix, isValid && "is-valid", isInvalid && "is-invalid")
  }));
});
FormCheckInput.displayName = "FormCheckInput";
var FormCheckInput_default = FormCheckInput;

// node_modules/react-bootstrap/esm/FormCheckLabel.js
var import_classnames3 = __toModule(require_classnames());
var React4 = __toModule(require_react());
var import_react2 = __toModule(require_react());
var import_jsx_runtime3 = __toModule(require_jsx_runtime());
var FormCheckLabel = React4.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    htmlFor
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "htmlFor"
  ]);
  const {
    controlId
  } = (0, import_react2.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-check-label");
  return (0, import_jsx_runtime3.jsx)("label", __spreadProps(__spreadValues({}, props), {
    ref,
    htmlFor: htmlFor || controlId,
    className: (0, import_classnames3.default)(className, bsPrefix)
  }));
});
FormCheckLabel.displayName = "FormCheckLabel";
var FormCheckLabel_default = FormCheckLabel;

// node_modules/react-bootstrap/esm/ElementChildren.js
var React5 = __toModule(require_react());
function map(children, func) {
  let index = 0;
  return React5.Children.map(children, (child) => React5.isValidElement(child) ? func(child, index++) : child);
}
function forEach(children, func) {
  let index = 0;
  React5.Children.forEach(children, (child) => {
    if (React5.isValidElement(child))
      func(child, index++);
  });
}
function hasChildOfType(children, type) {
  return React5.Children.toArray(children).some((child) => React5.isValidElement(child) && child.type === type);
}

// node_modules/react-bootstrap/esm/FormCheck.js
var import_jsx_runtime4 = __toModule(require_jsx_runtime());
var import_jsx_runtime5 = __toModule(require_jsx_runtime());
var import_jsx_runtime6 = __toModule(require_jsx_runtime());
var FormCheck = React6.forwardRef((_a, ref) => {
  var _b = _a, {
    id,
    bsPrefix,
    bsSwitchPrefix,
    inline = false,
    disabled = false,
    isValid = false,
    isInvalid = false,
    feedbackTooltip = false,
    feedback,
    feedbackType,
    className,
    style,
    title = "",
    type = "checkbox",
    label,
    children,
    as = "input"
  } = _b, props = __objRest(_b, [
    "id",
    "bsPrefix",
    "bsSwitchPrefix",
    "inline",
    "disabled",
    "isValid",
    "isInvalid",
    "feedbackTooltip",
    "feedback",
    "feedbackType",
    "className",
    "style",
    "title",
    "type",
    "label",
    "children",
    "as"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-check");
  bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, "form-switch");
  const {
    controlId
  } = (0, import_react3.useContext)(FormContext_default);
  const innerFormContext = (0, import_react3.useMemo)(() => ({
    controlId: id || controlId
  }), [controlId, id]);
  const hasLabel = !children && label != null && label !== false || hasChildOfType(children, FormCheckLabel_default);
  const input = (0, import_jsx_runtime4.jsx)(FormCheckInput_default, __spreadProps(__spreadValues({}, props), {
    type: type === "switch" ? "checkbox" : type,
    ref,
    isValid,
    isInvalid,
    disabled,
    as
  }));
  return (0, import_jsx_runtime4.jsx)(FormContext_default.Provider, {
    value: innerFormContext,
    children: (0, import_jsx_runtime4.jsx)("div", {
      style,
      className: (0, import_classnames4.default)(className, hasLabel && bsPrefix, inline && `${bsPrefix}-inline`, type === "switch" && bsSwitchPrefix),
      children: children || (0, import_jsx_runtime6.jsxs)(import_jsx_runtime5.Fragment, {
        children: [input, hasLabel && (0, import_jsx_runtime4.jsx)(FormCheckLabel_default, {
          title,
          children: label
        }), feedback && (0, import_jsx_runtime4.jsx)(Feedback_default, {
          type: feedbackType,
          tooltip: feedbackTooltip,
          children: feedback
        })]
      })
    })
  });
});
FormCheck.displayName = "FormCheck";
var FormCheck_default = Object.assign(FormCheck, {
  Input: FormCheckInput_default,
  Label: FormCheckLabel_default
});

// node_modules/react-bootstrap/esm/FormControl.js
var import_classnames5 = __toModule(require_classnames());
var React7 = __toModule(require_react());
var import_react4 = __toModule(require_react());
var import_warning = __toModule(require_warning());
var import_jsx_runtime7 = __toModule(require_jsx_runtime());
var FormControl = React7.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    type,
    size,
    htmlSize,
    id,
    className,
    isValid = false,
    isInvalid = false,
    plaintext,
    readOnly,
    as: Component = "input"
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "type",
    "size",
    "htmlSize",
    "id",
    "className",
    "isValid",
    "isInvalid",
    "plaintext",
    "readOnly",
    "as"
  ]);
  const {
    controlId
  } = (0, import_react4.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-control");
  let classes;
  if (plaintext) {
    classes = {
      [`${bsPrefix}-plaintext`]: true
    };
  } else {
    classes = {
      [bsPrefix]: true,
      [`${bsPrefix}-${size}`]: size
    };
  }
  true ? (0, import_warning.default)(controlId == null || !id, "`controlId` is ignored on `<FormControl>` when `id` is specified.") : void 0;
  return (0, import_jsx_runtime7.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    type,
    size: htmlSize,
    ref,
    readOnly,
    id: id || controlId,
    className: (0, import_classnames5.default)(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === "color" && `${bsPrefix}-color`)
  }));
});
FormControl.displayName = "FormControl";
var FormControl_default = Object.assign(FormControl, {
  Feedback: Feedback_default
});

// node_modules/react-bootstrap/esm/FormFloating.js
var FormFloating_default = createWithBsPrefix("form-floating");

// node_modules/react-bootstrap/esm/FormGroup.js
var React8 = __toModule(require_react());
var import_react5 = __toModule(require_react());
var import_jsx_runtime8 = __toModule(require_jsx_runtime());
var FormGroup = React8.forwardRef((_a, ref) => {
  var _b = _a, {
    controlId,
    as: Component = "div"
  } = _b, props = __objRest(_b, [
    "controlId",
    "as"
  ]);
  const context = (0, import_react5.useMemo)(() => ({
    controlId
  }), [controlId]);
  return (0, import_jsx_runtime8.jsx)(FormContext_default.Provider, {
    value: context,
    children: (0, import_jsx_runtime8.jsx)(Component, __spreadProps(__spreadValues({}, props), {
      ref
    }))
  });
});
FormGroup.displayName = "FormGroup";
var FormGroup_default = FormGroup;

// node_modules/react-bootstrap/esm/FormLabel.js
var import_classnames6 = __toModule(require_classnames());
var React9 = __toModule(require_react());
var import_react6 = __toModule(require_react());
var import_warning2 = __toModule(require_warning());
var import_jsx_runtime9 = __toModule(require_jsx_runtime());
var defaultProps = {
  column: false,
  visuallyHidden: false
};
var FormLabel = React9.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "label",
    bsPrefix,
    column,
    visuallyHidden,
    className,
    htmlFor
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "column",
    "visuallyHidden",
    "className",
    "htmlFor"
  ]);
  const {
    controlId
  } = (0, import_react6.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-label");
  let columnClass = "col-form-label";
  if (typeof column === "string")
    columnClass = `${columnClass} ${columnClass}-${column}`;
  const classes = (0, import_classnames6.default)(className, bsPrefix, visuallyHidden && "visually-hidden", column && columnClass);
  true ? (0, import_warning2.default)(controlId == null || !htmlFor, "`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.") : void 0;
  htmlFor = htmlFor || controlId;
  if (column)
    return (0, import_jsx_runtime9.jsx)(Col_default, __spreadValues({
      ref,
      as: "label",
      className: classes,
      htmlFor
    }, props));
  return (0, import_jsx_runtime9.jsx)(Component, __spreadValues({
    ref,
    className: classes,
    htmlFor
  }, props));
});
FormLabel.displayName = "FormLabel";
FormLabel.defaultProps = defaultProps;
var FormLabel_default = FormLabel;

// node_modules/react-bootstrap/esm/FormSelect.js
var import_classnames7 = __toModule(require_classnames());
var React10 = __toModule(require_react());
var import_react7 = __toModule(require_react());
var import_jsx_runtime10 = __toModule(require_jsx_runtime());
var FormSelect = React10.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    size,
    htmlSize,
    className,
    isValid = false,
    isInvalid = false,
    id
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "size",
    "htmlSize",
    "className",
    "isValid",
    "isInvalid",
    "id"
  ]);
  const {
    controlId
  } = (0, import_react7.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-select");
  return (0, import_jsx_runtime10.jsx)("select", __spreadProps(__spreadValues({}, props), {
    size: htmlSize,
    ref,
    className: (0, import_classnames7.default)(className, bsPrefix, size && `${bsPrefix}-${size}`, isValid && `is-valid`, isInvalid && `is-invalid`),
    id: id || controlId
  }));
});
FormSelect.displayName = "FormSelect";
var FormSelect_default = FormSelect;

// node_modules/react-bootstrap/esm/FormText.js
var import_classnames8 = __toModule(require_classnames());
var React11 = __toModule(require_react());
var import_jsx_runtime11 = __toModule(require_jsx_runtime());
var FormText = React11.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    as: Component = "small",
    muted
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "as",
    "muted"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-text");
  return (0, import_jsx_runtime11.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames8.default)(className, bsPrefix, muted && "text-muted")
  }));
});
FormText.displayName = "FormText";
var FormText_default = FormText;

// node_modules/react-bootstrap/esm/FloatingLabel.js
var import_classnames9 = __toModule(require_classnames());
var React12 = __toModule(require_react());
var import_jsx_runtime12 = __toModule(require_jsx_runtime());
var import_jsx_runtime13 = __toModule(require_jsx_runtime());
var FloatingLabel = React12.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    children,
    controlId,
    label
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "children",
    "controlId",
    "label"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-floating");
  return (0, import_jsx_runtime13.jsxs)(FormGroup_default, __spreadProps(__spreadValues({
    ref,
    className: (0, import_classnames9.default)(className, bsPrefix),
    controlId
  }, props), {
    children: [children, (0, import_jsx_runtime12.jsx)("label", {
      htmlFor: controlId,
      children: label
    })]
  }));
});
FloatingLabel.displayName = "FloatingLabel";
var FloatingLabel_default = FloatingLabel;

// node_modules/react-bootstrap/esm/Form.js
var import_classnames11 = __toModule(require_classnames());
var import_prop_types2 = __toModule(require_prop_types());
var React15 = __toModule(require_react());

// node_modules/react-bootstrap/esm/FormRange.js
var import_classnames10 = __toModule(require_classnames());
var React13 = __toModule(require_react());
var import_react8 = __toModule(require_react());
var import_jsx_runtime14 = __toModule(require_jsx_runtime());
var FormRange = React13.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    id
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "id"
  ]);
  const {
    controlId
  } = (0, import_react8.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-range");
  return (0, import_jsx_runtime14.jsx)("input", __spreadProps(__spreadValues({}, props), {
    type: "range",
    ref,
    className: (0, import_classnames10.default)(className, bsPrefix),
    id: id || controlId
  }));
});
FormRange.displayName = "FormRange";
var FormRange_default = FormRange;

// node_modules/react-bootstrap/esm/Switch.js
var React14 = __toModule(require_react());
var import_jsx_runtime15 = __toModule(require_jsx_runtime());
var Switch = React14.forwardRef((props, ref) => (0, import_jsx_runtime15.jsx)(FormCheck_default, __spreadProps(__spreadValues({}, props), {
  ref,
  type: "switch"
})));
Switch.displayName = "Switch";
var Switch_default = Object.assign(Switch, {
  Input: FormCheck_default.Input,
  Label: FormCheck_default.Label
});

// node_modules/react-bootstrap/esm/Form.js
var import_jsx_runtime16 = __toModule(require_jsx_runtime());
var propTypes2 = {
  _ref: import_prop_types2.default.any,
  validated: import_prop_types2.default.bool,
  as: import_prop_types2.default.elementType
};
var Form = React15.forwardRef((_a, ref) => {
  var _b = _a, {
    className,
    validated,
    as: Component = "form"
  } = _b, props = __objRest(_b, [
    "className",
    "validated",
    "as"
  ]);
  return (0, import_jsx_runtime16.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames11.default)(className, validated && "was-validated")
  }));
});
Form.displayName = "Form";
Form.propTypes = propTypes2;
var Form_default = Object.assign(Form, {
  Group: FormGroup_default,
  Control: FormControl_default,
  Floating: FormFloating_default,
  Check: FormCheck_default,
  Switch: Switch_default,
  Label: FormLabel_default,
  Text: FormText_default,
  Range: FormRange_default,
  Select: FormSelect_default,
  FloatingLabel: FloatingLabel_default
});

export {
  FormCheckInput_default,
  map,
  forEach,
  FormCheck_default,
  require_warning,
  FormControl_default,
  FormFloating_default,
  FormGroup_default,
  FormLabel_default,
  FormSelect_default,
  FormText_default,
  FloatingLabel_default,
  Form_default
};
//# sourceMappingURL=chunk-H5C3VQ43.js.map
